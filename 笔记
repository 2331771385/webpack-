webpack的简介：
webpack是一个javascript应用程序的静态资源打包工具。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，
然后将所有这些模块打包成一个或多个 bundle

webpack的四个核心概念：
（1）入口（entry）
（2）输出（output）
（3）loader
（4）插件


入口：
指定了webpack应该使用哪个模块来作为构建其内部依赖树的开始。进入入口起点之后，就要找出哪些模块和库是有依赖的
每一个依赖项会被处理，处理之后会被存放到称之为bundles的文件中。
我们可以自己配置程序的入口文件，一般默认情况下就是./src文件中。


出口：
output属性告诉webpack在哪里输出他所创建的bundles,以及如何命名这些文件，默认是./dist。


loader：
loader编辑器能够让webpack处理非js类型的文件，以前webpack只能处理javascript文件。但是现在loader可以将文件进行转换
将文件转化为webpack能够识别的有效文件。然后再利用webpack的打包原理，对他们进行处理。
本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。
在更高层面上，webpack中loader的使用包含以下两个方面：
test:标示出用于被loader转换的某一类文件
use：将文件进行转化的时候，所使用的loader

const path = require('path');

const config = {
  output: {  //出口
    filename: 'my-first-webpack.bundle.js'
  },
  module: {
    rules: [
      { test: /\.txt$/, use: 'raw-loader' }
    ]
  }
};

module.exports = config

//上面的例子表示被解析为txt文件类别的时候，使用的loader为raw-loader

并且需要注意的是：在webpack中定义loader的时候，要将loader写在module下的rules中，



插件：
可以完成一些更加强大的功能，比如art-template，这些插件在使用的时候只需要使用require（）引入，然后把它添加到 plugins 数组中


模式：
可以选择development或者production的其中一个来设置mode参数。
module.exports = {
  mode: 'production'
};
